pipeline {
    agent none
    
    parameters {
        string(name:'TAG_NAME',defaultValue: '',description:'')
    }

    environment {
        DOCKER_CREDENTIAL_ID = 'dockerhub-id'
        GITHUB_CREDENTIAL_ID = 'github-id'
        KUBECONFIG_CREDENTIAL_ID = 'demo-kubeconfig'
        REGISTRY = 'docker.io'
        DOCKERHUB_NAMESPACE = 'docker_username'
        GITHUB_ACCOUNT = 'eachchat'
        APP_NAME = 'desktoptest'
        SONAR_CREDENTIAL_ID = 'sonar-token'
    }

    stages{

                stage('window build'){
                    agent {
                        label 'eachchat-desktop-win10'
                    }
                    
                    steps {
                        checkout(scm)
 
                        withCredentials([string(credentialsId: "$SONAR_CREDENTIAL_ID", variable: 'SONAR_TOKEN')]) {
                            withSonarQubeEnv('sonar') {
                                bat "sonar-scanner.bat -Dsonar.projectKey=eachchat-desktop -Dsonar.sources=. -Dsonar.host.url=http://192.168.1.2:4716 -Dsonar.login=e7408ac8e3f1cc0a4dd104f9de28e2847d56769f"
                            }
                        }
                        timeout(time: 1, unit: 'HOURS') {
                            waitForQualityGate abortPipeline: true
                        }
    
                        bat '''
                        cd ./prj
                        yarn run build
                        '''
                    }
                    
                    post {
                        failure {
                            mail to: 'chengfang@workly.ai',
                            subject: "Window Failed Pipeline: ${currentBuild.fullDisplayName}",
                            body: "${env.BUILD_URL}"
                        }
                        success {
                            mail to: 'chengfang@workly.ai',
                            subject: 'Window Successed Pipeline: ${currentBuild.fullDisplayName}',
                            body: "${env.BUILD_URL}"
                        }
                    }              
                }
    }
}


